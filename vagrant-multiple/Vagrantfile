# -*- mode: ruby -*-
# vi: set ft=ruby :

# Multi-vm setup with static IPs is based on work from Bertrand Szoghy, see: https://github.com/bertrandszoghy/vagrant_ansible_private_network_example

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  (1..3).each do |i|
    config.vm.define "web-#{i}" do |node|
      # Every Vagrant development environment requires a box. You can search for boxes at https://vagrantcloud.com/search.
      # For info on Vagrant's official CentOS box, see: https://app.vagrantup.com/centos/boxes/7
      node.vm.box = "centos/7"

      # Set an explicit hostname for the VM. Not required, but makes interactive shells easier to differentiate
      node.vm.hostname = "web-#{i}"

      # Create a private network, which allows host-only access to the machine
      # using a specific IP.
      node.vm.network "private_network", ip: "192.168.33.#{10 + i}"

      # Note about port forwarding: Once you've enabled the "private_network" configuration, port forwarding would only be require
      #   if you still want to access your VM over 'localhost'

      # Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine. In the example below,
      # accessing "localhost:8080" will access port 80 on the guest machine.
      # NOTE: This will enable public access to the opened port
      # node.vm.network "forwarded_port", guest: 80, host: 8080
      # Alternatively, Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine and only allow access
      # via 127.0.0.1 to disable public access
      # node.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

      # Create a public network, which generally matched to bridged network.
      # Bridged networks make the machine appear as another physical device on
      # your network.
      # node.vm.network "public_network"

      # SSH config to use a pre-created key pair, which is generated by create-ssh-key-if-needed.sh
      # Explanation: Add the public key to auth_keys, but _don't_ leave Vagrant's own key in that file; just overwrite it!
      # While config.ssh.private_key_path does include Vagrant's global key, it is overwritten by a provisioner, therefore is not permanent
      # Now, we don't have to insert an auto-gen key at all!
      # This method is adapted from Minwoo Lee, see: https://ermaker.github.io/blog/2015/11/18/change-insecure-key-to-my-own-key-on-vagrant.html
      system('./create-ssh-key-if-needed.sh') # This line of ruby will run _every_ time you invoke `vagrant...` (even status, etc.!), but the script is set up to only gen a new key the _first_ time
      node.ssh.private_key_path = ["./id_rsa_vagrant", "~/.vagrant.d/insecure_private_key"]
      node.ssh.insert_key = false
      ssh_public_key_contents = File.readlines("./id_rsa_vagrant.pub").first.strip
      node.vm.provision "shell", inline: "echo '#{ssh_public_key_contents}' > /home/vagrant/.ssh/authorized_keys", privileged: false
    end
  end
end
