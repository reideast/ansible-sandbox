# -*- mode: ruby -*-
# vi: set ft=ruby :

# Multi-vm setup with static IPs is based on work from Bertrand Szoghy, see: https://github.com/bertrandszoghy/vagrant_ansible_private_network_example

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.vm.define "web" do |web|
    # Every Vagrant development environment requires a box. You can search for boxes at https://vagrantcloud.com/search.
    # For info on Vagrant's official CentOS box, see: https://app.vagrantup.com/centos/boxes/7
    web.vm.box = "centos/7"

    # Set an explicit hostname for the VM. Not required, but makes interactive shells easier to differentiate
    web.vm.hostname = "web"

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    web.vm.network "private_network", ip: "192.168.33.10"

    # Note about port forwarding: Once you've enabled the "private_network" configuration, port forwarding would only be require
    #   if you still want to access your VM over 'localhost'

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    # web.vm.network "forwarded_port", guest: 80, host: 8080
    # Alternatively, Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via 127.0.0.1 to disable public access
    # web.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # web.vm.network "public_network"
  end
end
